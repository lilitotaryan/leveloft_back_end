# Generated by Django 3.1.2 on 2020-10-02 08:51

import authentication.models
import authentication.utils
import authentication.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccountAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, null=True)),
                ('timestamp', models.DateTimeField(default=authentication.utils.get_current_time)),
                ('user_action', models.IntegerField(choices=[(1, 'UNSUCCESSFUL_LOGIN'), (2, 'FIRST_LOGIN'), (3, 'LOGIN'), (4, 'RESET_PASSWORD'), (5, 'REGISTER'), (6, 'UNSUCCESSFUL_REGISTER'), (7, 'LOGOUT'), (8, 'UNSUCCESSFULL_RESET_PASSWORD')], null=True)),
                ('additional_params', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('public_id', models.IntegerField(default=authentication.utils.id_generator, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=250, null=True, unique=True, verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email address already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(max_length=250, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_email_confirmed', models.BooleanField(default=False, help_text='Designates whether this user has confirmed their email. ', verbose_name='email confirmed')),
                ('office', models.CharField(max_length=250, null=True, verbose_name='office')),
                ('position', models.CharField(blank=True, max_length=250, null=True, verbose_name='position')),
                ('date_joined', models.DateTimeField(default=authentication.utils.get_current_time, verbose_name='date joined')),
                ('is_live', models.BooleanField(default=False)),
                ('ot_token', models.IntegerField(default=authentication.utils.id_generator, unique=True)),
                ('ot_token_date', models.DateTimeField(default=authentication.utils.get_current_time, verbose_name='last reset password token update date')),
                ('room_id', models.IntegerField(blank=True, default=0)),
                ('phone_number', models.CharField(blank=True, max_length=28, null=True, validators=[authentication.validators.validate_phone_number])),
                ('is_demo', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', authentication.models.UserManager()),
            ],
        ),
    ]
